{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Button","value","state","onClick","onAuxClick","className","mapButton","index","around","rowI","Math","floor","columnJ","push","COLUMNS","ROWS","reducer","action","type","bombs","max","buttons","Array","from","num","map","button","random","filter","elem","length","console","log","generateButtons","newState","stack","currentButton","pop","forEach","element","App","useState","time","setTime","flags","useReducer","dispatch","modal","setModal","useEffect","window","addEventListener","e","preventDefault","setInterval","location","href","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb69a554.chunk.js","sourcesContent":["import { useEffect, useReducer, useState } from 'react';\nimport './App.css';\n\nconst COLUMNS = 8;\nconst ROWS = 8;\nconst FLAGS = 10;\nconst TOTAL = ROWS * COLUMNS;\n\nconst random = (max) => {\n  return Math.floor(Math.random() * (max + 1));\n}\n\nconst Button = ({value, state, onClick, onAuxClick}) => {\n  return(\n    <button \n      className={`button ${state ? 'grey' : 'blue'}`}\n      onClick={onClick} \n      onAuxClick={onAuxClick}>\n      {state && value !== 0 ? \n      (value === -1)  ? <i className=\"fas fa-bomb\"></i> : value\n      : ''}\n    </button>\n  );\n}\n\nconst mapButton= (index) => {\n  const around = [];\n  const rowI = Math.floor(index / ROWS);\n  const columnJ = index % COLUMNS;\n\n  if(columnJ > 0){\n    around.push(index - 1);\n    if(rowI > 0){\n      around.push(index - 1 - COLUMNS);\n    }\n  }\n\n  if(rowI > 0){\n    around.push(index - COLUMNS);\n    if(columnJ < (COLUMNS - 1)){\n      around.push(index - COLUMNS + 1);\n    }    \n  }\n\n  if(columnJ < (COLUMNS - 1)){\n    around.push(index + 1);\n    if(rowI < (ROWS - 1)){\n      around.push(index + COLUMNS + 1)\n    }\n  }\n\n  if(rowI < (ROWS - 1)){\n    around.push(index + COLUMNS);\n    if(columnJ > 0){\n      around.push(index + COLUMNS - 1);\n    }\n  }\n\n  return around;\n}\n\nconst generateButtons= (bombs) => {\n  let buttons = Array.from(new Array(TOTAL));\n  let num = 0;\n  \n  buttons = buttons.map((button, index) => ({\n    value: 0,\n    state: false,\n    around: mapButton(index)\n  }));\n  \n  while(bombs--){\n    do{\n      num = random(TOTAL);\n    }while(buttons[num].value < 0);\n    buttons[num].value = -1;\n  }\n  \n  buttons = buttons.map((button) => ({\n    ...button,\n    value: button.value !== -1 ? \n           button.around.filter((elem) => buttons[elem].value === -1).length : \n           button.value\n  }));\n\n  console.log(buttons)\n\n  return buttons;\n}\n\nconst reducer = (state, action) => {\n  switch(action.type){\n    case 'set':\n      return generateButtons(FLAGS);\n    case 'changeState':\n      if(!state[action.index].state){\n        const newState = [...state];\n        newState[action.index].state = true;\n        const stack = [newState[action.index]];\n        let currentButton = stack.pop();\n        do{\n          if(currentButton.value === 0){\n            currentButton.around.forEach(element => {\n              if(!newState[element].state){\n                newState[element].state = true;\n                if(newState[element].value === 0){\n                  stack.push(newState[element]);\n                }\n              }\n            });\n            currentButton = stack.pop();\n          }\n        }while(stack.length > 0);\n        return newState;\n      }\n      return state;\n  }\n}\n\nfunction App() {\n\n  const [time, setTime] = useState(0);\n  const [flags, setFlags] = useState(FLAGS)\n  const [buttons, dispatch] = useReducer(reducer, []);\n  const [modal, setModal] = useState(false);\n\n  useEffect(() => {\n    // Desativated Right-Click\n    window.addEventListener('contextmenu', (e) => {\n      e.preventDefault(); \n    }, false);\n\n    setInterval(()=>{\n      setTime(time => time + 1)\n    }, 1000);\n\n    dispatch({type: 'set'});\n  }, [])\n\n  return (\n    <>\n      <header>\n        <div className='header-container'>\n          <div className='card'>\n            <i className=\"fas fa-flag\"></i>\n            {flags < 10 ? '0' + flags : flags}\n          </div>\n          <div className='card-title'>\n            <i className=\"fas fa-bomb\"></i>\n          </div>\n          <div className='card'>\n            <i className=\"fas fa-clock\"></i>\n            {time < 10 ? '0' + time : time}\n          </div>\n        </div>\n      </header>\n      <section>\n        <div className='button-container'>\n          {buttons.map((button, index) => (\n            <Button \n              key={index} \n              {...button} \n              onClick={()=>{\n                if(button.value === -1){\n                  setModal(true)\n                }else\n                  dispatch({type: 'changeState', index})\n              }} \n              onAuxClick={()=>console.log(button.around)}/>\n          ))}\n        </div>\n      </section>\n\n      {modal && <section className=\"modal-container\">\n                  <div className=\"modal\">\n                      <h2>YOU LOSE!</h2>\n                      <button onClick={()=>window.location.href = window.location.href}>\n                        <i class=\"fas fa-redo-alt\"></i>\n                      </button>\n                  </div>\n                </section>}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}